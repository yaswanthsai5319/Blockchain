{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* query(peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: new CID(peerId),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.id = new CID(message.id);\n      message.responses = (message.responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        addrs: (Addrs || []).map(a => multiaddr(a))\n      }));\n      yield message;\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/dht/query.js"],"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","query","peerId","options","res","post","timeout","signal","searchParams","arg","headers","message","ndjson","id","responses","map","ID","Addrs","addrs","a"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,gBAAiBC,KAAjB,CAAwBC,MAAxB,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AACnD,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsB;AACtCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADqB;AAEtCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFsB;AAGtCC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,QAAAA,GAAG,EAAE,IAAIjB,GAAJ,CAAQU,MAAR,CADyB;AAE9B,WAAGC;AAF2B,OAAD,CAHO;AAOtCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AAPqB,KAAtB,CAAlB;;AAUA,eAAW,IAAIC,OAAf,IAA0BP,GAAG,CAACQ,MAAJ,EAA1B,EAAwC;AACtCD,MAAAA,OAAO,GAAGhB,OAAO,CAACgB,OAAD,CAAjB;AACAA,MAAAA,OAAO,CAACE,EAAR,GAAa,IAAIrB,GAAJ,CAAQmB,OAAO,CAACE,EAAhB,CAAb;AACAF,MAAAA,OAAO,CAACG,SAAR,GAAoB,CAACH,OAAO,CAACG,SAAR,IAAqB,EAAtB,EAA0BC,GAA1B,CAA8B,CAAC;AAAEC,QAAAA,EAAF;AAAMC,QAAAA;AAAN,OAAD,MAAoB;AACpEJ,QAAAA,EAAE,EAAEG,EADgE;AAEpEE,QAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcF,GAAd,CAAkBI,CAAC,IAAIzB,SAAS,CAACyB,CAAD,CAAhC;AAF6D,OAApB,CAA9B,CAApB;AAIA,YAAMR,OAAN;AACD;AACF,GApBD;AAqBD,CAtByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * query (peerId, options = {}) {\n    const res = await api.post('dht/query', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: new CID(peerId),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      message.responses = (message.responses || []).map(({ ID, Addrs }) => ({\n        id: ID,\n        addrs: (Addrs || []).map(a => multiaddr(a))\n      }))\n      yield message\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}