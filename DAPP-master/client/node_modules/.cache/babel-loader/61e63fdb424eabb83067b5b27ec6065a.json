{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async (template, options = {}) => {\n    if (typeof template !== 'string') {\n      options = template || {};\n      template = null;\n    }\n\n    const res = await api.post('object/new', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: template,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Hash\n    } = await res.json();\n    return new CID(Hash);\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/object/new.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","template","options","res","post","timeout","signal","searchParams","arg","headers","Hash","json"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,OAAOC,QAAP,EAAiBC,OAAO,GAAG,EAA3B,KAAkC;AACvC,QAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAChCC,MAAAA,OAAO,GAAGD,QAAQ,IAAI,EAAtB;AACAA,MAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,UAAME,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEP,QADyB;AAE9B,WAAGC;AAF2B,OAAD,CAHQ;AAOvCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AAPsB,KAAvB,CAAlB;AAUA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMP,GAAG,CAACQ,IAAJ,EAAvB;AAEA,WAAO,IAAIjB,GAAJ,CAAQgB,IAAR,CAAP;AACD,GAnBD;AAoBD,CArByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (template, options = {}) => {\n    if (typeof template !== 'string') {\n      options = template || {}\n      template = null\n    }\n\n    const res = await api.post('object/new', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: template,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n})\n"]},"metadata":{},"sourceType":"script"}