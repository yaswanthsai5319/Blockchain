{"ast":null,"code":"'use strict';\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst dagPB = require('ipld-dag-pb');\n\nconst ipldRaw = require('ipld-raw');\n\nconst CID = require('cids');\n\nconst multihash = require('multihashes');\n\nconst configure = require('../lib/configure');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst anySignal = require('any-signal');\n\nconst AbortController = require('abort-controller');\n\nconst multicodec = require('multicodec');\n\nmodule.exports = configure((api, opts) => {\n  const formats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: ipldRaw\n  };\n  const ipldOptions = opts && opts.ipld || {};\n  const configuredFormats = ipldOptions && ipldOptions.formats || [];\n  configuredFormats.forEach(format => {\n    formats[format.codec] = format;\n  });\n  return async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options');\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options');\n    }\n\n    if (options.cid) {\n      const cid = new CID(options.cid);\n      options = { ...options,\n        format: cid.codec,\n        hashAlg: multihash.decode(cid.multihash).name\n      };\n      delete options.cid;\n    }\n\n    options = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...options\n    };\n    const number = multicodec.getNumber(options.format);\n    let format = formats[number];\n\n    if (!format) {\n      if (opts && opts.ipld && opts.ipld.loadFormat) {\n        format = await opts.ipld.loadFormat(options.format);\n      }\n\n      if (!format) {\n        throw new Error('Format unsupported - please add support using the options.ipld.formats or options.ipld.loadFormat options');\n      }\n    }\n\n    if (!format.util || !format.util.serialize) {\n      throw new Error('Format does not support utils.serialize function');\n    }\n\n    const serialized = format.util.serialize(dagNode); // allow aborting requests on body errors\n\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    const res = await api.post('dag/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(serialized, controller, options.headers))\n    });\n    const data = await res.json();\n    return new CID(data.Cid['/']);\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/dag/put.js"],"names":["dagCBOR","require","dagPB","ipldRaw","CID","multihash","configure","multipartRequest","toUrlSearchParams","anySignal","AbortController","multicodec","module","exports","api","opts","formats","DAG_PB","DAG_CBOR","RAW","ipldOptions","ipld","configuredFormats","forEach","format","codec","dagNode","options","cid","hashAlg","Error","decode","name","inputEnc","number","getNumber","loadFormat","util","serialize","serialized","controller","signal","res","post","timeout","searchParams","headers","data","json","Cid"],"mappings":"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","sourcesContent":["'use strict'\n\nconst dagCBOR = require('ipld-dag-cbor')\nconst dagPB = require('ipld-dag-pb')\nconst ipldRaw = require('ipld-raw')\nconst CID = require('cids')\nconst multihash = require('multihashes')\nconst configure = require('../lib/configure')\nconst multipartRequest = require('../lib/multipart-request')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst anySignal = require('any-signal')\nconst AbortController = require('abort-controller')\nconst multicodec = require('multicodec')\n\nmodule.exports = configure((api, opts) => {\n  const formats = {\n    [multicodec.DAG_PB]: dagPB,\n    [multicodec.DAG_CBOR]: dagCBOR,\n    [multicodec.RAW]: ipldRaw\n  }\n\n  const ipldOptions = (opts && opts.ipld) || {}\n  const configuredFormats = (ipldOptions && ipldOptions.formats) || []\n  configuredFormats.forEach(format => {\n    formats[format.codec] = format\n  })\n\n  return async (dagNode, options = {}) => {\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide either `cid` OR `format` and `hashAlg` options')\n    } else if ((options.format && !options.hashAlg) || (!options.format && options.hashAlg)) {\n      throw new Error('Failed to put DAG node. Provide `format` AND `hashAlg` options')\n    }\n\n    if (options.cid) {\n      const cid = new CID(options.cid)\n      options = {\n        ...options,\n        format: cid.codec,\n        hashAlg: multihash.decode(cid.multihash).name\n      }\n      delete options.cid\n    }\n\n    options = {\n      format: 'dag-cbor',\n      hashAlg: 'sha2-256',\n      inputEnc: 'raw',\n      ...options\n    }\n\n    const number = multicodec.getNumber(options.format)\n    let format = formats[number]\n\n    if (!format) {\n      if (opts && opts.ipld && opts.ipld.loadFormat) {\n        format = await opts.ipld.loadFormat(options.format)\n      }\n\n      if (!format) {\n        throw new Error('Format unsupported - please add support using the options.ipld.formats or options.ipld.loadFormat options')\n      }\n    }\n\n    if (!format.util || !format.util.serialize) {\n      throw new Error('Format does not support utils.serialize function')\n    }\n\n    const serialized = format.util.serialize(dagNode)\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('dag/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(serialized, controller, options.headers)\n      )\n    })\n    const data = await res.json()\n\n    return new CID(data.Cid['/'])\n  }\n})\n"]},"metadata":{},"sourceType":"script"}