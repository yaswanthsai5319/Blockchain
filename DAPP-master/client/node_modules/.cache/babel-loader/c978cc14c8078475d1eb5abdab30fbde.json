{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* rm(cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n\n    const res = await api.post('block/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => new CID(cid).toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  };\n});\n\nfunction toCoreInterface(removed) {\n  const out = {\n    cid: new CID(removed.Hash)\n  };\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n\n  return out;\n}","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/block/rm.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","rm","cid","options","Array","isArray","res","post","timeout","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","out","Hash","Error","error"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,gBAAiBC,EAAjB,CAAqBC,GAArB,EAA0BC,OAAO,GAAG,EAApC,EAAwC;AAC7C,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyB;AACvBA,MAAAA,GAAG,GAAG,CAACA,GAAD,CAAN;AACD;;AAED,UAAMI,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OADoB;AAErCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MAFqB;AAGrCC,MAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,QAAAA,GAAG,EAAET,GAAG,CAACU,GAAJ,CAAQV,GAAG,IAAI,IAAIR,GAAJ,CAAQQ,GAAR,EAAaW,QAAb,EAAf,CADyB;AAE9B,2BAAmB,IAFW;AAG9B,WAAGV;AAH2B,OAAD,CAHM;AAQrCW,MAAAA,OAAO,EAAEX,OAAO,CAACW;AARoB,KAArB,CAAlB;;AAWA,eAAW,MAAMC,OAAjB,IAA4BT,GAAG,CAACU,MAAJ,EAA5B,EAA0C;AACxC,YAAMC,eAAe,CAACF,OAAD,CAArB;AACD;AACF,GAnBD;AAoBD,CArByB,CAA1B;;AAuBA,SAASE,eAAT,CAA0BF,OAA1B,EAAmC;AACjC,QAAMG,GAAG,GAAG;AACVhB,IAAAA,GAAG,EAAE,IAAIR,GAAJ,CAAQqB,OAAO,CAACI,IAAhB;AADK,GAAZ;;AAIA,MAAIJ,OAAO,CAACK,KAAZ,EAAmB;AACjBF,IAAAA,GAAG,CAACG,KAAJ,GAAY,IAAID,KAAJ,CAAUL,OAAO,CAACK,KAAlB,CAAZ;AACD;;AAED,SAAOF,GAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => new CID(cid).toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n})\n\nfunction toCoreInterface (removed) {\n  const out = {\n    cid: new CID(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"]},"metadata":{},"sourceType":"script"}