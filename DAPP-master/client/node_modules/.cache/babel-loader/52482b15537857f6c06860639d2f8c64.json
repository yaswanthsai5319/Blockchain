{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst toCamel = require('./lib/object-to-camel');\n\nconst configure = require('./lib/configure');\n\nconst multipartRequest = require('./lib/multipart-request');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nconst anySignal = require('any-signal');\n\nconst AbortController = require('abort-controller');\n\nmodule.exports = configure(api => {\n  return async function* add(input, options = {}) {\n    const progressFn = options.progress; // allow aborting requests on body errors\n\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      timeout: options.timeout,\n      signal,\n      ...(await multipartRequest(input, controller, options.headers))\n    });\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file);\n\n      if (progressFn && file.bytes) {\n        progressFn(file.bytes);\n      } else {\n        yield toCoreInterface(file);\n      }\n    }\n  };\n});\n\nfunction toCoreInterface({\n  name,\n  hash,\n  size,\n  mode,\n  mtime,\n  mtimeNsecs\n}) {\n  const output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/add.js"],"names":["CID","require","toCamel","configure","multipartRequest","toUrlSearchParams","anySignal","AbortController","module","exports","api","add","input","options","progressFn","progress","controller","signal","res","post","searchParams","Boolean","timeout","headers","file","ndjson","bytes","toCoreInterface","name","hash","size","mode","mtime","mtimeNsecs","output","path","cid","parseInt","secs","nsecs"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,yBAAD,CAAhC;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,4BAAD,CAAjC;;AACA,MAAMK,SAAS,GAAGL,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAMM,eAAe,GAAGN,OAAO,CAAC,kBAAD,CAA/B;;AAEAO,MAAM,CAACC,OAAP,GAAiBN,SAAS,CAAEO,GAAD,IAAS;AAClC,SAAO,gBAAiBC,GAAjB,CAAsBC,KAAtB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AAChD,UAAMC,UAAU,GAAGD,OAAO,CAACE,QAA3B,CADgD,CAGhD;;AACA,UAAMC,UAAU,GAAG,IAAIT,eAAJ,EAAnB;AACA,UAAMU,MAAM,GAAGX,SAAS,CAAC,CAACU,UAAU,CAACC,MAAZ,EAAoBJ,OAAO,CAACI,MAA5B,CAAD,CAAxB;AAEA,UAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,KAAT,EAAgB;AAChCC,MAAAA,YAAY,EAAEf,iBAAiB,CAAC;AAC9B,2BAAmB,IADW;AAE9B,WAAGQ,OAF2B;AAG9BE,QAAAA,QAAQ,EAAEM,OAAO,CAACP,UAAD;AAHa,OAAD,CADC;AAMhCQ,MAAAA,OAAO,EAAET,OAAO,CAACS,OANe;AAOhCL,MAAAA,MAPgC;AAQhC,UACE,MAAMb,gBAAgB,CAACQ,KAAD,EAAQI,UAAR,EAAoBH,OAAO,CAACU,OAA5B,CADxB;AARgC,KAAhB,CAAlB;;AAaA,eAAW,IAAIC,IAAf,IAAuBN,GAAG,CAACO,MAAJ,EAAvB,EAAqC;AACnCD,MAAAA,IAAI,GAAGtB,OAAO,CAACsB,IAAD,CAAd;;AAEA,UAAIV,UAAU,IAAIU,IAAI,CAACE,KAAvB,EAA8B;AAC5BZ,QAAAA,UAAU,CAACU,IAAI,CAACE,KAAN,CAAV;AACD,OAFD,MAEO;AACL,cAAMC,eAAe,CAACH,IAAD,CAArB;AACD;AACF;AACF,GA7BD;AA8BD,CA/ByB,CAA1B;;AAiCA,SAASG,eAAT,CAA0B;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,KAA1B;AAAiCC,EAAAA;AAAjC,CAA1B,EAAyE;AACvE,QAAMC,MAAM,GAAG;AACbC,IAAAA,IAAI,EAAEP,IADO;AAEbQ,IAAAA,GAAG,EAAE,IAAIpC,GAAJ,CAAQ6B,IAAR,CAFQ;AAGbC,IAAAA,IAAI,EAAEO,QAAQ,CAACP,IAAD;AAHD,GAAf;;AAMA,MAAIC,IAAI,IAAI,IAAZ,EAAkB;AAChBG,IAAAA,MAAM,CAACH,IAAP,GAAcM,QAAQ,CAACN,IAAD,EAAO,CAAP,CAAtB;AACD;;AAED,MAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBE,IAAAA,MAAM,CAACF,KAAP,GAAe;AACbM,MAAAA,IAAI,EAAEN,KADO;AAEbO,MAAAA,KAAK,EAAEN,UAAU,IAAI;AAFR,KAAf;AAID;;AAED,SAAOC,MAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamel = require('./lib/object-to-camel')\nconst configure = require('./lib/configure')\nconst multipartRequest = require('./lib/multipart-request')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst anySignal = require('any-signal')\nconst AbortController = require('abort-controller')\n\nmodule.exports = configure((api) => {\n  return async function * add (input, options = {}) {\n    const progressFn = options.progress\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      timeout: options.timeout,\n      signal,\n      ...(\n        await multipartRequest(input, controller, options.headers)\n      )\n    })\n\n    for await (let file of res.ndjson()) {\n      file = toCamel(file)\n\n      if (progressFn && file.bytes) {\n        progressFn(file.bytes)\n      } else {\n        yield toCoreInterface(file)\n      }\n    }\n  }\n})\n\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  const output = {\n    path: name,\n    cid: new CID(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"]},"metadata":{},"sourceType":"script"}