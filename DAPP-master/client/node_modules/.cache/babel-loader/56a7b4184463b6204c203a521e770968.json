{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst anySignal = require('any-signal');\n\nconst AbortController = require('abort-controller');\n\nmodule.exports = configure(api => {\n  return async (obj, options = {}) => {\n    let tmpObj = {\n      Data: null,\n      Links: []\n    };\n\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        };\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: obj.Data.toString(),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      };\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString();\n      tmpObj.Links = obj.Links;\n    } else {\n      throw new Error('obj not recognized');\n    }\n\n    let buf;\n\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj;\n    } else {\n      options.enc = 'json';\n      buf = Buffer.from(JSON.stringify(tmpObj));\n    } // allow aborting requests on body errors\n\n\n    const controller = new AbortController();\n    const signal = anySignal([controller.signal, options.signal]);\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(buf, controller, options.headers))\n    });\n    const {\n      Hash\n    } = await res.json();\n    return new CID(Hash);\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/object/put.js"],"names":["CID","require","DAGNode","Buffer","multipartRequest","configure","toUrlSearchParams","anySignal","AbortController","module","exports","api","obj","options","tmpObj","Data","Links","isBuffer","enc","toString","isDAGNode","map","l","Name","Hash","Size","Tsize","Error","buf","from","JSON","stringify","controller","signal","res","post","timeout","searchParams","headers","json"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode } = require('ipld-dag-pb')\nconst { Buffer } = require('buffer')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst anySignal = require('any-signal')\nconst AbortController = require('abort-controller')\n\nmodule.exports = configure(api => {\n  return async (obj, options = {}) => {\n    let tmpObj = {\n      Data: null,\n      Links: []\n    }\n\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        }\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: obj.Data.toString(),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      }\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString()\n      tmpObj.Links = obj.Links\n    } else {\n      throw new Error('obj not recognized')\n    }\n\n    let buf\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj\n    } else {\n      options.enc = 'json'\n      buf = Buffer.from(JSON.stringify(tmpObj))\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = anySignal([controller.signal, options.signal])\n\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(buf, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n})\n"]},"metadata":{},"sourceType":"script"}