{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst dagCBOR = require('ipld-dag-cbor');\n\nconst raw = require('ipld-raw');\n\nconst configure = require('../lib/configure');\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n};\nmodule.exports = configure((api, options) => {\n  const getBlock = require('../block/get')(options);\n\n  const dagResolve = require('./resolve')(options);\n\n  return async (cid, path, options = {}) => {\n    if (path && typeof path === 'object') {\n      options = path;\n      path = null;\n    }\n\n    const resolved = await dagResolve(cid, path, options);\n    const block = await getBlock(resolved.cid, options);\n    const dagResolver = resolvers[block.cid.codec];\n\n    if (!dagResolver) {\n      throw Object.assign(new Error(`Missing IPLD format \"${block.cid.codec}\"`), {\n        missingMulticodec: cid.codec\n      });\n    }\n\n    if (block.cid.codec === 'raw' && !resolved.remPath) {\n      resolved.remPath = '/';\n    }\n\n    return dagResolver.resolve(block.data, resolved.remPath);\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/dag/get.js"],"names":["dagPB","require","dagCBOR","raw","configure","resolvers","resolver","module","exports","api","options","getBlock","dagResolve","cid","path","resolved","block","dagResolver","codec","Object","assign","Error","missingMulticodec","remPath","resolve","data"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AAEA,MAAMI,SAAS,GAAG;AAChB,cAAYH,OAAO,CAACI,QADJ;AAEhB,YAAUN,KAAK,CAACM,QAFA;AAGhBH,EAAAA,GAAG,EAAEA,GAAG,CAACG;AAHO,CAAlB;AAMAC,MAAM,CAACC,OAAP,GAAiBJ,SAAS,CAAC,CAACK,GAAD,EAAMC,OAAN,KAAkB;AAC3C,QAAMC,QAAQ,GAAGV,OAAO,CAAC,cAAD,CAAP,CAAwBS,OAAxB,CAAjB;;AACA,QAAME,UAAU,GAAGX,OAAO,CAAC,WAAD,CAAP,CAAqBS,OAArB,CAAnB;;AAEA,SAAO,OAAOG,GAAP,EAAYC,IAAZ,EAAkBJ,OAAO,GAAG,EAA5B,KAAmC;AACxC,QAAII,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AACpCJ,MAAAA,OAAO,GAAGI,IAAV;AACAA,MAAAA,IAAI,GAAG,IAAP;AACD;;AAED,UAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACC,GAAD,EAAMC,IAAN,EAAYJ,OAAZ,CAAjC;AACA,UAAMM,KAAK,GAAG,MAAML,QAAQ,CAACI,QAAQ,CAACF,GAAV,EAAeH,OAAf,CAA5B;AACA,UAAMO,WAAW,GAAGZ,SAAS,CAACW,KAAK,CAACH,GAAN,CAAUK,KAAX,CAA7B;;AAEA,QAAI,CAACD,WAAL,EAAkB;AAChB,YAAME,MAAM,CAACC,MAAP,CACJ,IAAIC,KAAJ,CAAW,wBAAuBL,KAAK,CAACH,GAAN,CAAUK,KAAM,GAAlD,CADI,EAEJ;AAAEI,QAAAA,iBAAiB,EAAET,GAAG,CAACK;AAAzB,OAFI,CAAN;AAID;;AAED,QAAIF,KAAK,CAACH,GAAN,CAAUK,KAAV,KAAoB,KAApB,IAA6B,CAACH,QAAQ,CAACQ,OAA3C,EAAoD;AAClDR,MAAAA,QAAQ,CAACQ,OAAT,GAAmB,GAAnB;AACD;;AAED,WAAON,WAAW,CAACO,OAAZ,CAAoBR,KAAK,CAACS,IAA1B,EAAgCV,QAAQ,CAACQ,OAAzC,CAAP;AACD,GAtBD;AAuBD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst dagPB = require('ipld-dag-pb')\nconst dagCBOR = require('ipld-dag-cbor')\nconst raw = require('ipld-raw')\nconst configure = require('../lib/configure')\n\nconst resolvers = {\n  'dag-cbor': dagCBOR.resolver,\n  'dag-pb': dagPB.resolver,\n  raw: raw.resolver\n}\n\nmodule.exports = configure((api, options) => {\n  const getBlock = require('../block/get')(options)\n  const dagResolve = require('./resolve')(options)\n\n  return async (cid, path, options = {}) => {\n    if (path && typeof path === 'object') {\n      options = path\n      path = null\n    }\n\n    const resolved = await dagResolve(cid, path, options)\n    const block = await getBlock(resolved.cid, options)\n    const dagResolver = resolvers[block.cid.codec]\n\n    if (!dagResolver) {\n      throw Object.assign(\n        new Error(`Missing IPLD format \"${block.cid.codec}\"`),\n        { missingMulticodec: cid.codec }\n      )\n    }\n\n    if (block.cid.codec === 'raw' && !resolved.remPath) {\n      resolved.remPath = '/'\n    }\n\n    return dagResolver.resolve(block.data, resolved.remPath)\n  }\n})\n"]},"metadata":{},"sourceType":"script"}