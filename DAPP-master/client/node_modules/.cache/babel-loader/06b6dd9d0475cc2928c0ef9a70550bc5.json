{"ast":null,"code":"'use strict';\n\nconst Multiaddr = require('multiaddr');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async (addr, options = {}) => {\n    if (addr && typeof addr === 'object' && !Multiaddr.isMultiaddr(addr)) {\n      options = addr;\n      addr = null;\n    }\n\n    const res = await api.post('bootstrap/add', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    return res.json();\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/bootstrap/add.js"],"names":["Multiaddr","require","configure","toUrlSearchParams","module","exports","api","addr","options","isMultiaddr","res","post","timeout","signal","searchParams","arg","headers","json"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,OAAOC,IAAP,EAAaC,OAAO,GAAG,EAAvB,KAA8B;AACnC,QAAID,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoC,CAACP,SAAS,CAACS,WAAV,CAAsBF,IAAtB,CAAzC,EAAsE;AACpEC,MAAAA,OAAO,GAAGD,IAAV;AACAA,MAAAA,IAAI,GAAG,IAAP;AACD;;AAED,UAAMG,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,MAAAA,OAAO,EAAEJ,OAAO,CAACI,OADyB;AAE1CC,MAAAA,MAAM,EAAEL,OAAO,CAACK,MAF0B;AAG1CC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,QAAAA,GAAG,EAAER,IADyB;AAE9B,WAAGC;AAF2B,OAAD,CAHW;AAO1CQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPyB,KAA1B,CAAlB;AAUA,WAAON,GAAG,CAACO,IAAJ,EAAP;AACD,GAjBD;AAkBD,CAnByB,CAA1B","sourcesContent":["'use strict'\n\nconst Multiaddr = require('multiaddr')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (addr, options = {}) => {\n    if (addr && typeof addr === 'object' && !Multiaddr.isMultiaddr(addr)) {\n      options = addr\n      addr = null\n    }\n\n    const res = await api.post('bootstrap/add', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    return res.json()\n  }\n})\n"]},"metadata":{},"sourceType":"script"}