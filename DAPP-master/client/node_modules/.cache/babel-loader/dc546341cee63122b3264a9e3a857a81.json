{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async (path, options = {}) => {\n    const res = await api.post('pin/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return (data.Pins || []).map(cid => ({\n      cid: new CID(cid)\n    }));\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/pin/rm.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","path","options","res","post","timeout","signal","searchParams","arg","headers","data","json","Pins","map","cid"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,OAAOC,IAAP,EAAaC,OAAO,GAAG,EAAvB,KAA8B;AACnC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADkB;AAEnCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFmB;AAGnCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAG,GAAEP,IAAK,EADiB;AAE9B,WAAGC;AAF2B,OAAD,CAHI;AAOnCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AAPkB,KAAnB,CAAlB;AAUA,UAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AAEA,WAAO,CAACD,IAAI,CAACE,IAAL,IAAa,EAAd,EAAkBC,GAAlB,CAAsBC,GAAG,KAAK;AAAEA,MAAAA,GAAG,EAAE,IAAIpB,GAAJ,CAAQoB,GAAR;AAAP,KAAL,CAAzB,CAAP;AACD,GAdD;AAeD,CAhByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (path, options = {}) => {\n    const res = await api.post('pin/rm', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const data = await res.json()\n\n    return (data.Pins || []).map(cid => ({ cid: new CID(cid) }))\n  }\n})\n"]},"metadata":{},"sourceType":"script"}