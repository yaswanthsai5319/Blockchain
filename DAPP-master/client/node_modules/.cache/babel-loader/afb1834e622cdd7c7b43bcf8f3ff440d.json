{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* provide(cids, options = {}) {\n    cids = Array.isArray(cids) ? cids : [cids];\n    const res = await api.post('dht/provide', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cids.map(cid => new CID(cid).toString()),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message);\n      message.id = new CID(message.id);\n\n      if (message.responses) {\n        message.responses = message.responses.map(({\n          ID,\n          Addrs\n        }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }));\n      } else {\n        message.responses = [];\n      }\n\n      yield message;\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/dht/provide.js"],"names":["CID","require","multiaddr","toCamel","configure","toUrlSearchParams","module","exports","api","provide","cids","options","Array","isArray","res","post","timeout","signal","searchParams","arg","map","cid","toString","headers","message","ndjson","id","responses","ID","Addrs","addrs","a"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,6BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,gBAAiBC,OAAjB,CAA0BC,IAA1B,EAAgCC,OAAO,GAAG,EAA1C,EAA8C;AACnDD,IAAAA,IAAI,GAAGE,KAAK,CAACC,OAAN,CAAcH,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAApC;AAEA,UAAMI,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,OAAO,EAAEL,OAAO,CAACK,OADuB;AAExCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MAFwB;AAGxCC,MAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,QAAAA,GAAG,EAAET,IAAI,CAACU,GAAL,CAASC,GAAG,IAAI,IAAIrB,GAAJ,CAAQqB,GAAR,EAAaC,QAAb,EAAhB,CADyB;AAE9B,WAAGX;AAF2B,OAAD,CAHS;AAOxCY,MAAAA,OAAO,EAAEZ,OAAO,CAACY;AAPuB,KAAxB,CAAlB;;AAUA,eAAW,IAAIC,OAAf,IAA0BV,GAAG,CAACW,MAAJ,EAA1B,EAAwC;AACtCD,MAAAA,OAAO,GAAGrB,OAAO,CAACqB,OAAD,CAAjB;AACAA,MAAAA,OAAO,CAACE,EAAR,GAAa,IAAI1B,GAAJ,CAAQwB,OAAO,CAACE,EAAhB,CAAb;;AACA,UAAIF,OAAO,CAACG,SAAZ,EAAuB;AACrBH,QAAAA,OAAO,CAACG,SAAR,GAAoBH,OAAO,CAACG,SAAR,CAAkBP,GAAlB,CAAsB,CAAC;AAAEQ,UAAAA,EAAF;AAAMC,UAAAA;AAAN,SAAD,MAAoB;AAC5DH,UAAAA,EAAE,EAAEE,EADwD;AAE5DE,UAAAA,KAAK,EAAE,CAACD,KAAK,IAAI,EAAV,EAAcT,GAAd,CAAkBW,CAAC,IAAI7B,SAAS,CAAC6B,CAAD,CAAhC;AAFqD,SAApB,CAAtB,CAApB;AAID,OALD,MAKO;AACLP,QAAAA,OAAO,CAACG,SAAR,GAAoB,EAApB;AACD;;AACD,YAAMH,OAAN;AACD;AACF,GA1BD;AA2BD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * provide (cids, options = {}) {\n    cids = Array.isArray(cids) ? cids : [cids]\n\n    const res = await api.post('dht/provide', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cids.map(cid => new CID(cid).toString()),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let message of res.ndjson()) {\n      message = toCamel(message)\n      message.id = new CID(message.id)\n      if (message.responses) {\n        message.responses = message.responses.map(({ ID, Addrs }) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => multiaddr(a))\n        }))\n      } else {\n        message.responses = []\n      }\n      yield message\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}