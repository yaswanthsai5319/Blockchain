{"ast":null,"code":"'use strict';\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n\n    const params = {\n      arg: [key, value],\n      ...options\n    };\n\n    if (typeof value === 'boolean') {\n      params.arg[1] = value.toString();\n      params.bool = true;\n    } else if (typeof value !== 'string') {\n      params.arg[1] = JSON.stringify(value);\n      params.json = true;\n    }\n\n    const res = await api.post('config', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    return toCamel(await res.json());\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/config/set.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","key","value","options","Error","params","arg","toString","bool","JSON","stringify","json","res","post","timeout","signal","searchParams","headers"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,OAAOC,GAAP,EAAYC,KAAZ,EAAmBC,OAAO,GAAG,EAA7B,KAAoC;AACzC,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,UAAMC,MAAM,GAAG;AACbC,MAAAA,GAAG,EAAE,CACHL,GADG,EAEHC,KAFG,CADQ;AAKb,SAAGC;AALU,KAAf;;AAQA,QAAI,OAAOD,KAAP,KAAiB,SAArB,EAAgC;AAC9BG,MAAAA,MAAM,CAACC,GAAP,CAAW,CAAX,IAAgBJ,KAAK,CAACK,QAAN,EAAhB;AACAF,MAAAA,MAAM,CAACG,IAAP,GAAc,IAAd;AACD,KAHD,MAGO,IAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;AACpCG,MAAAA,MAAM,CAACC,GAAP,CAAW,CAAX,IAAgBG,IAAI,CAACC,SAAL,CAAeR,KAAf,CAAhB;AACAG,MAAAA,MAAM,CAACM,IAAP,GAAc,IAAd;AACD;;AAED,UAAMC,GAAG,GAAG,MAAMZ,GAAG,CAACa,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,OAAO,EAAEX,OAAO,CAACW,OADkB;AAEnCC,MAAAA,MAAM,EAAEZ,OAAO,CAACY,MAFmB;AAGnCC,MAAAA,YAAY,EAAEnB,iBAAiB,CAACQ,MAAD,CAHI;AAInCY,MAAAA,OAAO,EAAEd,OAAO,CAACc;AAJkB,KAAnB,CAAlB;AAOA,WAAOvB,OAAO,CAAC,MAAMkB,GAAG,CAACD,IAAJ,EAAP,CAAd;AACD,GA7BD;AA8BD,CA/ByB,CAA1B","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      arg: [\n        key,\n        value\n      ],\n      ...options\n    }\n\n    if (typeof value === 'boolean') {\n      params.arg[1] = value.toString()\n      params.bool = true\n    } else if (typeof value !== 'string') {\n      params.arg[1] = JSON.stringify(value)\n      params.json = true\n    }\n\n    const res = await api.post('config', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    return toCamel(await res.json())\n  }\n})\n"]},"metadata":{},"sourceType":"script"}