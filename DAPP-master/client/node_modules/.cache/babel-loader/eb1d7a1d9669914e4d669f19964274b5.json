{"ast":null,"code":"'use strict'; // browsers can't stream. When the 'Send ReadableStream in request body' row\n// is green here: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#Browser_compatibility\n// we'll be able to wrap the passed iterator in the it-to-browser-readablestream module\n// in the meantime we have to convert the whole thing to a BufferSource of some sort\n\nconst toBuffer = require('it-to-buffer');\n\nconst {\n  Buffer\n} = require('buffer');\n\nmodule.exports = it => {\n  async function* bufferise(source) {\n    for await (const chunk of source) {\n      if (Buffer.isBuffer(chunk)) {\n        yield chunk;\n      } else {\n        yield Buffer.from(chunk);\n      }\n    }\n  }\n\n  return toBuffer(bufferise(it));\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/lib/to-stream.browser.js"],"names":["toBuffer","require","Buffer","module","exports","it","bufferise","source","chunk","isBuffer","from"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;;AACA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AAEAE,MAAM,CAACC,OAAP,GAAkBC,EAAD,IAAQ;AACvB,kBAAiBC,SAAjB,CAA4BC,MAA5B,EAAoC;AAClC,eAAW,MAAMC,KAAjB,IAA0BD,MAA1B,EAAkC;AAChC,UAAIL,MAAM,CAACO,QAAP,CAAgBD,KAAhB,CAAJ,EAA4B;AAC1B,cAAMA,KAAN;AACD,OAFD,MAEO;AACL,cAAMN,MAAM,CAACQ,IAAP,CAAYF,KAAZ,CAAN;AACD;AACF;AACF;;AAED,SAAOR,QAAQ,CAACM,SAAS,CAACD,EAAD,CAAV,CAAf;AACD,CAZD","sourcesContent":["'use strict'\n\n// browsers can't stream. When the 'Send ReadableStream in request body' row\n// is green here: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request#Browser_compatibility\n// we'll be able to wrap the passed iterator in the it-to-browser-readablestream module\n// in the meantime we have to convert the whole thing to a BufferSource of some sort\nconst toBuffer = require('it-to-buffer')\nconst { Buffer } = require('buffer')\n\nmodule.exports = (it) => {\n  async function * bufferise (source) {\n    for await (const chunk of source) {\n      if (Buffer.isBuffer(chunk)) {\n        yield chunk\n      } else {\n        yield Buffer.from(chunk)\n      }\n    }\n  }\n\n  return toBuffer(bufferise(it))\n}\n"]},"metadata":{},"sourceType":"script"}