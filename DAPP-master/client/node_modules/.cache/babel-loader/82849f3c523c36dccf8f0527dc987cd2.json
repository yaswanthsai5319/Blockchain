{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* cat(path, options = {}) {\n    const res = await api.post('cat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: typeof path === 'string' ? path : new CID(path).toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    yield* res.iterator();\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/cat.js"],"names":["CID","require","configure","toUrlSearchParams","module","exports","api","cat","path","options","res","post","timeout","signal","searchParams","arg","toString","headers","iterator"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,4BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,gBAAiBC,GAAjB,CAAsBC,IAAtB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AAC/C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,KAAT,EAAgB;AAChCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADe;AAEhCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFgB;AAGhCC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,QAAAA,GAAG,EAAE,OAAOP,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC,IAAIR,GAAJ,CAAQQ,IAAR,EAAcQ,QAAd,EADT;AAE9B,WAAGP;AAF2B,OAAD,CAHC;AAOhCQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPe,KAAhB,CAAlB;AAUA,WAAQP,GAAG,CAACQ,QAAJ,EAAR;AACD,GAZD;AAaD,CAdyB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * cat (path, options = {}) {\n    const res = await api.post('cat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: typeof path === 'string' ? path : new CID(path).toString(),\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    yield * res.iterator()\n  }\n})\n"]},"metadata":{},"sourceType":"script"}