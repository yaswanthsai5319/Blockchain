{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async (path, options = {}) => {\n    if (typeof path !== 'string') {\n      options = path || {};\n      path = '/';\n    }\n\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    data.WithLocality = data.WithLocality || false;\n    return toCoreInterface(toCamelWithMetadata(data));\n  };\n});\n\nfunction toCoreInterface(entry) {\n  entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/files/stat.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","path","options","res","post","timeout","signal","searchParams","arg","headers","data","json","WithLocality","toCoreInterface","entry","cid","hash"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,OAAOC,IAAP,EAAaC,OAAO,GAAG,EAAvB,KAA8B;AACnC,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BC,MAAAA,OAAO,GAAGD,IAAI,IAAI,EAAlB;AACAA,MAAAA,IAAI,GAAG,GAAP;AACD;;AAED,UAAME,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEP,IADyB;AAE9B,WAAGC;AAF2B,OAAD,CAHQ;AAOvCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AAPsB,KAAvB,CAAlB;AASA,UAAMC,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAJ,EAAnB;AAEAD,IAAAA,IAAI,CAACE,YAAL,GAAoBF,IAAI,CAACE,YAAL,IAAqB,KAAzC;AACA,WAAOC,eAAe,CAAClB,mBAAmB,CAACe,IAAD,CAApB,CAAtB;AACD,GAnBD;AAoBD,CArByB,CAA1B;;AAuBA,SAASG,eAAT,CAA0BC,KAA1B,EAAiC;AAC/BA,EAAAA,KAAK,CAACC,GAAN,GAAY,IAAItB,GAAJ,CAAQqB,KAAK,CAACE,IAAd,CAAZ;AACA,SAAOF,KAAK,CAACE,IAAb;AACA,SAAOF,KAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (path, options = {}) => {\n    if (typeof path !== 'string') {\n      options = path || {}\n      path = '/'\n    }\n\n    const res = await api.post('files/stat', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    data.WithLocality = data.WithLocality || false\n    return toCoreInterface(toCamelWithMetadata(data))\n  }\n})\n\nfunction toCoreInterface (entry) {\n  entry.cid = new CID(entry.hash)\n  delete entry.hash\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}