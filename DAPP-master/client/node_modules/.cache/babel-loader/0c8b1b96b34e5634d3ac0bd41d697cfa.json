{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Downloads\\\\DAPP-master-dup\\\\DAPP-master\\\\client\\\\src\\\\App.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport Context from './store/Context.js';\nimport InitialeState from './store/InitialeState.js';\nimport Reducer from './store/Reducer.js';\nimport ipfs from './components/Ipfs.js';\nimport AddDocument from './components/AddDocument.js';\nimport GenerateKeyPair from './components/GenerateKeyPair.js';\nimport GetDocument from './components/GetDocument.js';\nimport Notif from './components/Notif.js';\nimport SimpleStorage from './contracts/SimpleStorage.json';\nimport GetWeb3 from './utils/GetWeb3.js';\nimport { useNavigate } from 'react-router-dom'; // import { navigate } from '@reach/router';\n\nimport Axios from 'axios';\n\nfunction App() {\n  // use the reducer hook\n  const navigate = useNavigate();\n  const [state, dispatch] = useReducer(Reducer, InitialeState);\n  const [data, setData] = useState(\"\");\n  useEffect(() => {\n    if (sessionStorage.length == 0) {\n      navigate('/');\n    }\n\n    const init = async () => {\n      // get web3 instance\n      const web3 = await GetWeb3(); // get accounts      \n\n      const accounts = await web3.eth.getAccounts(); // get the contract instance from the blockchain\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorage.networks[networkId];\n      const contract = new web3.eth.Contract(SimpleStorage.abi, deployedNetwork && deployedNetwork.address); // set the web3 instance to a global variable\n\n      dispatch({\n        type: 'SET_WEB3',\n        payload: web3\n      }); // set accounts to a global variable\n\n      dispatch({\n        type: 'SET_ACCOUNTS',\n        payload: accounts\n      }); // set the contract instance to a global variable\n\n      dispatch({\n        type: 'SET_CONTRACT',\n        payload: contract\n      });\n    }; // launch the init function\n\n\n    init(); // if the account of metamask change, the accounts will be updated\n\n    window.ethereum.on('accountsChanged', accounts => {\n      dispatch({\n        type: 'SET_CONTRACT',\n        payload: accounts\n      });\n    });\n  }, []);\n\n  const handleClick = () => {\n    sessionStorage.clear();\n    navigate('/');\n  };\n\n  const getAll = () => {\n    Axios.get('http://localhost:3001/get', {\n      params: {\n        username: sessionStorage.getItem('username')\n      }\n    }).then(response => {\n      if (response.data == sessionStorage.getItem('username')) {\n        setData(response.data);\n      }\n    });\n  }; // the app will be started if the state is not null\n\n\n  if (state && !state.loading) {\n    return (\n      /*#__PURE__*/\n      // Provide state and dispatch function to the components of the app\n      React.createElement(Context.Provider, {\n        value: {\n          state,\n          dispatch\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 14\n        }\n      }), state.msg && /*#__PURE__*/React.createElement(Notif, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(AddDocument, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(GetDocument, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"hr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(GenerateKeyPair, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, \"Logout\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        onClick: getAll,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }, \"Get Data\"))\n    );\n  } else {\n    // if the state in null, the app shows loading message\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, \"Loading...\"));\n  }\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/src/App.js"],"names":["React","useReducer","useEffect","Context","InitialeState","Reducer","ipfs","AddDocument","GenerateKeyPair","GetDocument","Notif","SimpleStorage","GetWeb3","useNavigate","Axios","App","navigate","state","dispatch","data","setData","useState","sessionStorage","length","init","web3","accounts","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","contract","Contract","abi","address","type","payload","window","ethereum","on","handleClick","clear","getAll","get","params","username","getItem","then","response","loading","msg"],"mappings":"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","sourcesContent":["import React, {useReducer, useEffect} from 'react';\nimport Context from './store/Context.js';\nimport InitialeState from './store/InitialeState.js';\nimport Reducer from './store/Reducer.js';\nimport ipfs from './components/Ipfs.js';\nimport AddDocument from './components/AddDocument.js';\nimport GenerateKeyPair from './components/GenerateKeyPair.js';\nimport GetDocument from './components/GetDocument.js';\nimport Notif from './components/Notif.js';\nimport SimpleStorage from './contracts/SimpleStorage.json';\nimport GetWeb3 from './utils/GetWeb3.js';\nimport { useNavigate } from 'react-router-dom';\n// import { navigate } from '@reach/router';\nimport Axios from 'axios';\n\n\n\nfunction App() {\n  // use the reducer hook\n  const navigate = useNavigate();\n  const [state, dispatch] = useReducer(Reducer, InitialeState);\n  const [data,setData] =useState(\"\")\n  useEffect(() => {\n    if(sessionStorage.length==0)\n        {\n            navigate('/')\n        }\n\n    const init = async () => {\n      // get web3 instance\n      const web3 = await GetWeb3();\n      \n      // get accounts      \n      const accounts = await web3.eth.getAccounts();\n\n      // get the contract instance from the blockchain\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorage.networks[networkId];      \n      const contract = new web3.eth.Contract(\n        SimpleStorage.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n      // set the web3 instance to a global variable\n      dispatch({type: 'SET_WEB3', payload: web3});\n\n      // set accounts to a global variable\n      dispatch({type: 'SET_ACCOUNTS', payload: accounts});\n      \n      // set the contract instance to a global variable\n      dispatch({type: 'SET_CONTRACT', payload: contract});\n    }\n\n    // launch the init function\n    init();\n\n    // if the account of metamask change, the accounts will be updated\n    window.ethereum.on('accountsChanged', accounts => {\n      dispatch({type: 'SET_CONTRACT', payload: accounts});\n    });\n  }, []);\n\n  const handleClick=()=>{\n        sessionStorage.clear()\n        navigate('/')\n  }\n\n  const getAll=()=>{\n    Axios.get('http://localhost:3001/get', {\n  params: {\n    username:sessionStorage.getItem('username')\n  }\n}).then((response)=>\n{\n  if(response.data==sessionStorage.getItem('username'))\n  {\n  setData(response.data)\n  }\n})\n  }\n  // the app will be started if the state is not null\n  if(state && !state.loading) {\n    return (\n      // Provide state and dispatch function to the components of the app\n      <Context.Provider value={{state, dispatch}}>\n        <br/><br/>\n         \n        {state.msg && <Notif />}\n\n         \n        <AddDocument />\n        <hr/>\n\n         \n        <GetDocument />\n        <hr/>\n\n         \n        <GenerateKeyPair/>\n        <button type='submit' onClick={handleClick}>Logout</button>\n        <button type='submit' onClick={getAll}>Get Data</button>\n        \n      </Context.Provider>\n      \n    );\n  } else {\n    // if the state in null, the app shows loading message\n    return (\n      <>\n      <br/><br/>\n      <h2>Loading...</h2>\n      </>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}