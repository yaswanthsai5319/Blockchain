{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* ls(path, options = {}) {\n    if (typeof path !== 'string') {\n      options = path || {};\n      path = '/';\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.isCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result));\n      }\n    }\n  };\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) entry.cid = new CID(entry.hash);\n  delete entry.hash;\n  return entry;\n}","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/files/ls.js"],"names":["CID","require","toCamelWithMetadata","configure","toUrlSearchParams","module","exports","api","ls","path","options","res","post","timeout","signal","searchParams","arg","isCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","cid"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,sCAAD,CAAnC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;;AAEAI,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,gBAAiBC,EAAjB,CAAqBC,IAArB,EAA2BC,OAAO,GAAG,EAArC,EAAyC;AAC9C,QAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BC,MAAAA,OAAO,GAAGD,IAAI,IAAI,EAAlB;AACAA,MAAAA,IAAI,GAAG,GAAP;AACD;;AAED,UAAME,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADoB;AAErCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFqB;AAGrCC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,QAAAA,GAAG,EAAEhB,GAAG,CAACiB,KAAJ,CAAUR,IAAV,IAAmB,SAAQA,IAAK,EAAhC,GAAoCA,IADX;AAE9B;AACAS,QAAAA,IAAI,EAAE,IAHwB;AAI9B,WAAGR,OAJ2B;AAK9BS,QAAAA,MAAM,EAAE;AALsB,OAAD,CAHM;AAUrCC,MAAAA,OAAO,EAAEV,OAAO,CAACU;AAVoB,KAArB,CAAlB;;AAaA,eAAW,MAAMC,MAAjB,IAA2BV,GAAG,CAACW,MAAJ,EAA3B,EAAyC;AACvC;AACA,UAAI,aAAaD,MAAjB,EAAyB;AACvB,aAAK,MAAME,KAAX,IAAoBF,MAAM,CAACG,OAAP,IAAkB,EAAtC,EAA0C;AACxC,gBAAMC,eAAe,CAACvB,mBAAmB,CAACqB,KAAD,CAApB,CAArB;AACD;AACF,OAJD,MAIO;AACL,cAAME,eAAe,CAACvB,mBAAmB,CAACmB,MAAD,CAApB,CAArB;AACD;AACF;AACF,GA7BD;AA8BD,CA/ByB,CAA1B;;AAiCA,SAASI,eAAT,CAA0BF,KAA1B,EAAiC;AAC/B,MAAIA,KAAK,CAACG,IAAV,EAAgBH,KAAK,CAACI,GAAN,GAAY,IAAI3B,GAAJ,CAAQuB,KAAK,CAACG,IAAd,CAAZ;AAChB,SAAOH,KAAK,CAACG,IAAb;AACA,SAAOH,KAAP;AACD","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst toCamelWithMetadata = require('../lib/object-to-camel-with-metadata')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * ls (path, options = {}) {\n    if (typeof path !== 'string') {\n      options = path || {}\n      path = '/'\n    }\n\n    const res = await api.post('files/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: CID.isCID(path) ? `/ipfs/${path}` : path,\n        // default long to true, diverges from go-ipfs where its false by default\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const result of res.ndjson()) {\n      // go-ipfs does not yet support the \"stream\" option\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(toCamelWithMetadata(entry))\n        }\n      } else {\n        yield toCoreInterface(toCamelWithMetadata(result))\n      }\n    }\n  }\n})\n\nfunction toCoreInterface (entry) {\n  if (entry.hash) entry.cid = new CID(entry.hash)\n  delete entry.hash\n  return entry\n}\n"]},"metadata":{},"sourceType":"script"}