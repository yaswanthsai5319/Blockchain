{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst CID = require('cids');\n\nconst {\n  DAGNode,\n  DAGLink\n} = require('ipld-dag-pb');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async (cid, options = {}) => {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${Buffer.isBuffer(cid) ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return new DAGNode(Buffer.from(data.Data, 'base64'), (data.Links || []).map(l => new DAGLink(l.Name, l.Size, l.Hash)));\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/object/get.js"],"names":["Buffer","require","CID","DAGNode","DAGLink","configure","toUrlSearchParams","module","exports","api","cid","options","res","post","timeout","signal","searchParams","arg","isBuffer","dataEncoding","headers","data","json","from","Data","Links","map","l","Name","Size","Hash"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAM;AAAEE,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBH,OAAO,CAAC,aAAD,CAApC;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMK,iBAAiB,GAAGL,OAAO,CAAC,6BAAD,CAAjC;;AAEAM,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,OAAOC,GAAP,EAAYC,OAAO,GAAG,EAAtB,KAA6B;AAClC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,YAAT,EAAuB;AACvCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADsB;AAEvCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFuB;AAGvCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAG,GAAEjB,MAAM,CAACkB,QAAP,CAAgBR,GAAhB,IAAuB,IAAIR,GAAJ,CAAQQ,GAAR,CAAvB,GAAsCA,GAAI,EADpB;AAE9BS,QAAAA,YAAY,EAAE,QAFgB;AAG9B,WAAGR;AAH2B,OAAD,CAHQ;AAQvCS,MAAAA,OAAO,EAAET,OAAO,CAACS;AARsB,KAAvB,CAAlB;AAUA,UAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAnB;AAEA,WAAO,IAAInB,OAAJ,CACLH,MAAM,CAACuB,IAAP,CAAYF,IAAI,CAACG,IAAjB,EAAuB,QAAvB,CADK,EAEL,CAACH,IAAI,CAACI,KAAL,IAAc,EAAf,EAAmBC,GAAnB,CAAuBC,CAAC,IAAI,IAAIvB,OAAJ,CAAYuB,CAAC,CAACC,IAAd,EAAoBD,CAAC,CAACE,IAAtB,EAA4BF,CAAC,CAACG,IAA9B,CAA5B,CAFK,CAAP;AAID,GAjBD;AAkBD,CAnByB,CAA1B","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst CID = require('cids')\nconst { DAGNode, DAGLink } = require('ipld-dag-pb')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async (cid, options = {}) => {\n    const res = await api.post('object/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${Buffer.isBuffer(cid) ? new CID(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return new DAGNode(\n      Buffer.from(data.Data, 'base64'),\n      (data.Links || []).map(l => new DAGLink(l.Name, l.Size, l.Hash))\n    )\n  }\n})\n"]},"metadata":{},"sourceType":"script"}