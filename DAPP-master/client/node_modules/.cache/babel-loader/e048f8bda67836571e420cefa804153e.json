{"ast":null,"code":"'use strict';\n\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input');\n\nconst toStream = require('./to-stream');\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst modeToString = require('../lib/mode-to-string');\n\nconst mtimeToObject = require('../lib/mtime-to-object');\n\nconst merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nasync function multipartRequest(source = '', abortController, headers = {}, boundary = `-----------------------------${nanoid()}`) {\n  async function* streamFiles(source) {\n    try {\n      let index = 0;\n\n      for await (const {\n        content,\n        path,\n        mode,\n        mtime\n      } of normaliseInput(source)) {\n        let fileSuffix = '';\n        const type = content ? 'file' : 'dir';\n\n        if (index > 0) {\n          yield '\\r\\n';\n          fileSuffix = `-${index}`;\n        }\n\n        yield `--${boundary}\\r\\n`;\n        yield `Content-Disposition: form-data; name=\"${type}${fileSuffix}\"; filename=\"${encodeURIComponent(path)}\"\\r\\n`;\n        yield `Content-Type: ${content ? 'application/octet-stream' : 'application/x-directory'}\\r\\n`;\n\n        if (mode !== null && mode !== undefined) {\n          yield `mode: ${modeToString(mode)}\\r\\n`;\n        }\n\n        if (mtime != null) {\n          const {\n            secs,\n            nsecs\n          } = mtimeToObject(mtime);\n          yield `mtime: ${secs}\\r\\n`;\n\n          if (nsecs != null) {\n            yield `mtime-nsecs: ${nsecs}\\r\\n`;\n          }\n        }\n\n        yield '\\r\\n';\n\n        if (content) {\n          yield* content;\n        }\n\n        index++;\n      }\n    } catch (err) {\n      // workaround for https://github.com/node-fetch/node-fetch/issues/753\n      abortController.abort(err);\n    } finally {\n      yield `\\r\\n--${boundary}--\\r\\n`;\n    }\n  }\n\n  return {\n    headers: merge(headers, {\n      'Content-Type': `multipart/form-data; boundary=${boundary}`\n    }),\n    body: await toStream(streamFiles(source))\n  };\n}\n\nmodule.exports = multipartRequest;","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/lib/multipart-request.js"],"names":["normaliseInput","require","toStream","nanoid","modeToString","mtimeToObject","merge","bind","ignoreUndefined","multipartRequest","source","abortController","headers","boundary","streamFiles","index","content","path","mode","mtime","fileSuffix","type","encodeURIComponent","undefined","secs","nsecs","err","abort","body","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,2CAAD,CAA9B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAaF,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,uBAAD,CAA5B;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,wBAAD,CAA7B;;AACA,MAAMK,KAAK,GAAGL,OAAO,CAAC,eAAD,CAAP,CAAyBM,IAAzB,CAA8B;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAA9B,CAAd;;AAEA,eAAeC,gBAAf,CAAiCC,MAAM,GAAG,EAA1C,EAA8CC,eAA9C,EAA+DC,OAAO,GAAG,EAAzE,EAA6EC,QAAQ,GAAI,gCAA+BV,MAAM,EAAG,EAAjI,EAAoI;AAClI,kBAAiBW,WAAjB,CAA8BJ,MAA9B,EAAsC;AACpC,QAAI;AACF,UAAIK,KAAK,GAAG,CAAZ;;AAEA,iBAAW,MAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,IAAX;AAAiBC,QAAAA,IAAjB;AAAuBC,QAAAA;AAAvB,OAAjB,IAAmDnB,cAAc,CAACU,MAAD,CAAjE,EAA2E;AACzE,YAAIU,UAAU,GAAG,EAAjB;AACA,cAAMC,IAAI,GAAGL,OAAO,GAAG,MAAH,GAAY,KAAhC;;AAEA,YAAID,KAAK,GAAG,CAAZ,EAAe;AACb,gBAAM,MAAN;AAEAK,UAAAA,UAAU,GAAI,IAAGL,KAAM,EAAvB;AACD;;AAED,cAAO,KAAIF,QAAS,MAApB;AACA,cAAO,yCAAwCQ,IAAK,GAAED,UAAW,gBAAeE,kBAAkB,CAACL,IAAD,CAAO,OAAzG;AACA,cAAO,iBAAgBD,OAAO,GAAG,0BAAH,GAAgC,yBAA0B,MAAxF;;AAEA,YAAIE,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKK,SAA9B,EAAyC;AACvC,gBAAO,SAAQnB,YAAY,CAACc,IAAD,CAAO,MAAlC;AACD;;AAED,YAAIC,KAAK,IAAI,IAAb,EAAmB;AACjB,gBAAM;AACJK,YAAAA,IADI;AACEC,YAAAA;AADF,cAEFpB,aAAa,CAACc,KAAD,CAFjB;AAIA,gBAAO,UAASK,IAAK,MAArB;;AAEA,cAAIC,KAAK,IAAI,IAAb,EAAmB;AACjB,kBAAO,gBAAeA,KAAM,MAA5B;AACD;AACF;;AAED,cAAM,MAAN;;AAEA,YAAIT,OAAJ,EAAa;AACX,iBAAQA,OAAR;AACD;;AAEDD,QAAAA,KAAK;AACN;AACF,KAzCD,CAyCE,OAAOW,GAAP,EAAY;AACZ;AACAf,MAAAA,eAAe,CAACgB,KAAhB,CAAsBD,GAAtB;AACD,KA5CD,SA4CU;AACR,YAAO,SAAQb,QAAS,QAAxB;AACD;AACF;;AAED,SAAO;AACLD,IAAAA,OAAO,EAAEN,KAAK,CAACM,OAAD,EAAU;AACtB,sBAAiB,iCAAgCC,QAAS;AADpC,KAAV,CADT;AAILe,IAAAA,IAAI,EAAE,MAAM1B,QAAQ,CAACY,WAAW,CAACJ,MAAD,CAAZ;AAJf,GAAP;AAMD;;AAEDmB,MAAM,CAACC,OAAP,GAAiBrB,gBAAjB","sourcesContent":["'use strict'\n\nconst normaliseInput = require('ipfs-core-utils/src/files/normalise-input')\nconst toStream = require('./to-stream')\nconst { nanoid } = require('nanoid')\nconst modeToString = require('../lib/mode-to-string')\nconst mtimeToObject = require('../lib/mtime-to-object')\nconst merge = require('merge-options').bind({ ignoreUndefined: true })\n\nasync function multipartRequest (source = '', abortController, headers = {}, boundary = `-----------------------------${nanoid()}`) {\n  async function * streamFiles (source) {\n    try {\n      let index = 0\n\n      for await (const { content, path, mode, mtime } of normaliseInput(source)) {\n        let fileSuffix = ''\n        const type = content ? 'file' : 'dir'\n\n        if (index > 0) {\n          yield '\\r\\n'\n\n          fileSuffix = `-${index}`\n        }\n\n        yield `--${boundary}\\r\\n`\n        yield `Content-Disposition: form-data; name=\"${type}${fileSuffix}\"; filename=\"${encodeURIComponent(path)}\"\\r\\n`\n        yield `Content-Type: ${content ? 'application/octet-stream' : 'application/x-directory'}\\r\\n`\n\n        if (mode !== null && mode !== undefined) {\n          yield `mode: ${modeToString(mode)}\\r\\n`\n        }\n\n        if (mtime != null) {\n          const {\n            secs, nsecs\n          } = mtimeToObject(mtime)\n\n          yield `mtime: ${secs}\\r\\n`\n\n          if (nsecs != null) {\n            yield `mtime-nsecs: ${nsecs}\\r\\n`\n          }\n        }\n\n        yield '\\r\\n'\n\n        if (content) {\n          yield * content\n        }\n\n        index++\n      }\n    } catch (err) {\n      // workaround for https://github.com/node-fetch/node-fetch/issues/753\n      abortController.abort(err)\n    } finally {\n      yield `\\r\\n--${boundary}--\\r\\n`\n    }\n  }\n\n  return {\n    headers: merge(headers, {\n      'Content-Type': `multipart/form-data; boundary=${boundary}`\n    }),\n    body: await toStream(streamFiles(source))\n  }\n}\n\nmodule.exports = multipartRequest\n"]},"metadata":{},"sourceType":"script"}