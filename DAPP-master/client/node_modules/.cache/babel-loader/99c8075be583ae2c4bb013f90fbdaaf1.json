{"ast":null,"code":"var crypto = require('crypto');\n\nvar constants = require('constants');\n\nvar schemes = require('../schemes/schemes.js');\n\nmodule.exports = function (keyPair, options) {\n  var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n  return {\n    encrypt: function (buffer, usePrivate) {\n      var padding;\n\n      if (usePrivate) {\n        padding = constants.RSA_PKCS1_PADDING;\n\n        if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n          padding = options.encryptionSchemeOptions.padding;\n        }\n\n        return crypto.privateEncrypt({\n          key: options.rsaUtils.exportKey('private'),\n          padding: padding\n        }, buffer);\n      } else {\n        padding = constants.RSA_PKCS1_OAEP_PADDING;\n\n        if (options.encryptionScheme === 'pkcs1') {\n          padding = constants.RSA_PKCS1_PADDING;\n        }\n\n        if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n          padding = options.encryptionSchemeOptions.padding;\n        }\n\n        var data = buffer;\n\n        if (padding === constants.RSA_NO_PADDING) {\n          data = pkcs1Scheme.pkcs0pad(buffer);\n        }\n\n        return crypto.publicEncrypt({\n          key: options.rsaUtils.exportKey('public'),\n          padding: padding\n        }, data);\n      }\n    },\n    decrypt: function (buffer, usePublic) {\n      var padding;\n\n      if (usePublic) {\n        padding = constants.RSA_PKCS1_PADDING;\n\n        if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n          padding = options.encryptionSchemeOptions.padding;\n        }\n\n        return crypto.publicDecrypt({\n          key: options.rsaUtils.exportKey('public'),\n          padding: padding\n        }, buffer);\n      } else {\n        padding = constants.RSA_PKCS1_OAEP_PADDING;\n\n        if (options.encryptionScheme === 'pkcs1') {\n          padding = constants.RSA_PKCS1_PADDING;\n        }\n\n        if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n          padding = options.encryptionSchemeOptions.padding;\n        }\n\n        var res = crypto.privateDecrypt({\n          key: options.rsaUtils.exportKey('private'),\n          padding: padding\n        }, buffer);\n\n        if (padding === constants.RSA_NO_PADDING) {\n          return pkcs1Scheme.pkcs0unpad(res);\n        }\n\n        return res;\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/DAPP-master-dup/DAPP-master/client/node_modules/node-rsa/src/encryptEngines/io.js"],"names":["crypto","require","constants","schemes","module","exports","keyPair","options","pkcs1Scheme","pkcs1","makeScheme","encrypt","buffer","usePrivate","padding","RSA_PKCS1_PADDING","encryptionSchemeOptions","privateEncrypt","key","rsaUtils","exportKey","RSA_PKCS1_OAEP_PADDING","encryptionScheme","data","RSA_NO_PADDING","pkcs0pad","publicEncrypt","decrypt","usePublic","publicDecrypt","res","privateDecrypt","pkcs0unpad"],"mappings":"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","sourcesContent":["var crypto = require('crypto');\r\nvar constants = require('constants');\r\nvar schemes = require('../schemes/schemes.js');\r\n\r\nmodule.exports = function (keyPair, options) {\r\n    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\r\n\r\n    return {\r\n        encrypt: function (buffer, usePrivate) {\r\n            var padding;\r\n            if (usePrivate) {\r\n                padding = constants.RSA_PKCS1_PADDING;\r\n                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\r\n                    padding = options.encryptionSchemeOptions.padding;\r\n                }\r\n                return crypto.privateEncrypt({\r\n                    key: options.rsaUtils.exportKey('private'),\r\n                    padding: padding\r\n                }, buffer);\r\n            } else {\r\n                padding = constants.RSA_PKCS1_OAEP_PADDING;\r\n                if (options.encryptionScheme === 'pkcs1') {\r\n                    padding = constants.RSA_PKCS1_PADDING;\r\n                }\r\n                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\r\n                    padding = options.encryptionSchemeOptions.padding;\r\n                }\r\n\r\n                var data = buffer;\r\n                if (padding === constants.RSA_NO_PADDING) {\r\n                    data = pkcs1Scheme.pkcs0pad(buffer);\r\n                }\r\n\r\n                return crypto.publicEncrypt({\r\n                    key: options.rsaUtils.exportKey('public'),\r\n                    padding: padding\r\n                }, data);\r\n            }\r\n        },\r\n\r\n        decrypt: function (buffer, usePublic) {\r\n            var padding;\r\n            if (usePublic) {\r\n                padding = constants.RSA_PKCS1_PADDING;\r\n                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\r\n                    padding = options.encryptionSchemeOptions.padding;\r\n                }\r\n                return crypto.publicDecrypt({\r\n                    key: options.rsaUtils.exportKey('public'),\r\n                    padding: padding\r\n                }, buffer);\r\n            } else {\r\n                padding = constants.RSA_PKCS1_OAEP_PADDING;\r\n                if (options.encryptionScheme === 'pkcs1') {\r\n                    padding = constants.RSA_PKCS1_PADDING;\r\n                }\r\n                if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\r\n                    padding = options.encryptionSchemeOptions.padding;\r\n                }\r\n                var res = crypto.privateDecrypt({\r\n                    key: options.rsaUtils.exportKey('private'),\r\n                    padding: padding\r\n                }, buffer);\r\n\r\n                if (padding === constants.RSA_NO_PADDING) {\r\n                    return pkcs1Scheme.pkcs0unpad(res);\r\n                }\r\n                return res;\r\n            }\r\n        }\r\n    };\r\n};"]},"metadata":{},"sourceType":"script"}