{"ast":null,"code":"'use strict';\n\nconst Tar = require('it-tar');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst CID = require('cids');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  return async function* get(path, options = {}) {\n    const res = await api.post('get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${Buffer.isBuffer(path) ? new CID(path) : path}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const extractor = Tar.extract();\n\n    for await (const {\n      header,\n      body\n    } of extractor(res.iterator())) {\n      if (header.type === 'directory') {\n        yield {\n          path: header.name\n        };\n      } else {\n        yield {\n          path: header.name,\n          content: body\n        };\n      }\n    }\n  };\n});","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/get.js"],"names":["Tar","require","Buffer","CID","configure","toUrlSearchParams","module","exports","api","get","path","options","res","post","timeout","signal","searchParams","arg","isBuffer","headers","extractor","extract","header","body","iterator","type","name","content"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,4BAAD,CAAjC;;AAEAK,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC,SAAO,gBAAiBC,GAAjB,CAAsBC,IAAtB,EAA4BC,OAAO,GAAG,EAAtC,EAA0C;AAC/C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,KAAT,EAAgB;AAChCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADe;AAEhCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFgB;AAGhCC,MAAAA,YAAY,EAAEX,iBAAiB,CAAC;AAC9BY,QAAAA,GAAG,EAAG,GAAEf,MAAM,CAACgB,QAAP,CAAgBR,IAAhB,IAAwB,IAAIP,GAAJ,CAAQO,IAAR,CAAxB,GAAwCA,IAAK,EADvB;AAE9B,WAAGC;AAF2B,OAAD,CAHC;AAOhCQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPe,KAAhB,CAAlB;AAUA,UAAMC,SAAS,GAAGpB,GAAG,CAACqB,OAAJ,EAAlB;;AAEA,eAAW,MAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAjB,IAAqCH,SAAS,CAACR,GAAG,CAACY,QAAJ,EAAD,CAA9C,EAAgE;AAC9D,UAAIF,MAAM,CAACG,IAAP,KAAgB,WAApB,EAAiC;AAC/B,cAAM;AACJf,UAAAA,IAAI,EAAEY,MAAM,CAACI;AADT,SAAN;AAGD,OAJD,MAIO;AACL,cAAM;AACJhB,UAAAA,IAAI,EAAEY,MAAM,CAACI,IADT;AAEJC,UAAAA,OAAO,EAAEJ;AAFL,SAAN;AAID;AACF;AACF,GAzBD;AA0BD,CA3ByB,CAA1B","sourcesContent":["'use strict'\n\nconst Tar = require('it-tar')\nconst { Buffer } = require('buffer')\nconst CID = require('cids')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  return async function * get (path, options = {}) {\n    const res = await api.post('get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${Buffer.isBuffer(path) ? new CID(path) : path}`,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    const extractor = Tar.extract()\n\n    for await (const { header, body } of extractor(res.iterator())) {\n      if (header.type === 'directory') {\n        yield {\n          path: header.name\n        }\n      } else {\n        yield {\n          path: header.name,\n          content: body\n        }\n      }\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}