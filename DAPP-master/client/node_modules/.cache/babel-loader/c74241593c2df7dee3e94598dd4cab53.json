{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst CID = require('cids');\n\nconst multiaddr = require('multiaddr');\n\nconst multibase = require('multibase');\n\nconst multicodec = require('multicodec');\n\nconst multihash = require('multihashes');\n\nconst globSource = require('ipfs-utils/src/files/glob-source');\n\nconst urlSource = require('ipfs-utils/src/files/url-source');\n/**\n * @typedef { import(\"./lib/core\").ClientOptions } ClientOptions\n */\n\n/**\n *\n * @param {ClientOptions } options\n * @return {Object}\n */\n\n\nfunction ipfsClient(options = {}) {\n  return {\n    add: require('./add')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    shutdown: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  };\n}\n\nObject.assign(ipfsClient, {\n  Buffer,\n  CID,\n  multiaddr,\n  multibase,\n  multicodec,\n  multihash,\n  globSource,\n  urlSource\n});\nmodule.exports = ipfsClient;","map":{"version":3,"sources":["C:/Users/ASUS/Downloads/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/index.js"],"names":["Buffer","require","CID","multiaddr","multibase","multicodec","multihash","globSource","urlSource","ipfsClient","options","add","bitswap","block","bootstrap","cat","commands","config","dag","dht","diag","dns","files","get","getEndpointConfig","id","key","log","ls","mount","name","object","pin","ping","pubsub","refs","repo","resolve","stats","stop","shutdown","swarm","version","Object","assign","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/* eslint-env browser */\nconst { Buffer } = require('buffer')\nconst CID = require('cids')\nconst multiaddr = require('multiaddr')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihash = require('multihashes')\nconst globSource = require('ipfs-utils/src/files/glob-source')\nconst urlSource = require('ipfs-utils/src/files/url-source')\n\n/**\n * @typedef { import(\"./lib/core\").ClientOptions } ClientOptions\n */\n\n/**\n *\n * @param {ClientOptions } options\n * @return {Object}\n */\nfunction ipfsClient (options = {}) {\n  return {\n    add: require('./add')(options),\n    bitswap: require('./bitswap')(options),\n    block: require('./block')(options),\n    bootstrap: require('./bootstrap')(options),\n    cat: require('./cat')(options),\n    commands: require('./commands')(options),\n    config: require('./config')(options),\n    dag: require('./dag')(options),\n    dht: require('./dht')(options),\n    diag: require('./diag')(options),\n    dns: require('./dns')(options),\n    files: require('./files')(options),\n    get: require('./get')(options),\n    getEndpointConfig: require('./get-endpoint-config')(options),\n    id: require('./id')(options),\n    key: require('./key')(options),\n    log: require('./log')(options),\n    ls: require('./ls')(options),\n    mount: require('./mount')(options),\n    name: require('./name')(options),\n    object: require('./object')(options),\n    pin: require('./pin')(options),\n    ping: require('./ping')(options),\n    pubsub: require('./pubsub')(options),\n    refs: require('./refs')(options),\n    repo: require('./repo')(options),\n    resolve: require('./resolve')(options),\n    stats: require('./stats')(options),\n    stop: require('./stop')(options),\n    shutdown: require('./stop')(options),\n    swarm: require('./swarm')(options),\n    version: require('./version')(options)\n  }\n}\n\nObject.assign(ipfsClient, { Buffer, CID, multiaddr, multibase, multicodec, multihash, globSource, urlSource })\n\nmodule.exports = ipfsClient\n"]},"metadata":{},"sourceType":"script"}