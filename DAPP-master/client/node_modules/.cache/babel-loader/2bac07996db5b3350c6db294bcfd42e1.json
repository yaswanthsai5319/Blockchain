{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst Multiaddr = require('multiaddr');\n\nconst toUri = require('multiaddr-to-uri');\n\nconst {\n  isBrowser,\n  isWebWorker\n} = require('ipfs-utils/src/env');\n\nconst {\n  URL\n} = require('iso-url');\n\nconst parseDuration = require('parse-duration');\n\nconst log = require('debug')('ipfs-http-client:lib:error-handler');\n\nconst HTTP = require('ipfs-utils/src/http');\n\nconst merge = require('merge-options');\n\nconst isMultiaddr = input => {\n  try {\n    Multiaddr(input); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nconst normalizeInput = (options = {}) => {\n  if (isMultiaddr(options)) {\n    options = {\n      url: toUri(options)\n    };\n  } else if (typeof options === 'string') {\n    options = {\n      url: options\n    };\n  }\n\n  const url = new URL(options.url);\n\n  if (options.apiPath) {\n    url.pathname = options.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n\n  if (!options.url) {\n    if (isBrowser || isWebWorker) {\n      url.protocol = options.protocol || location.protocol;\n      url.hostname = options.host || location.hostname;\n      url.port = options.port || location.port;\n    } else {\n      url.hostname = options.host || 'localhost';\n      url.port = options.port || '5001';\n      url.protocol = options.protocol || 'http';\n    }\n  }\n\n  options.url = url;\n  return options;\n};\n\nconst errorHandler = async response => {\n  let msg;\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json();\n      log(data);\n      msg = data.Message || data.message;\n    } else {\n      msg = await response.text();\n    }\n  } catch (err) {\n    log('Failed to parse error response', err); // Failed to extract/parse error message from response\n\n    msg = err.message;\n  }\n\n  let error = new HTTP.HTTPError(response); // This is what go-ipfs returns where there's a timeout\n\n  if (msg && msg.includes('context deadline exceeded')) {\n    error = new HTTP.TimeoutError(response);\n  } // If we managed to extract a message from the response, use it\n\n\n  if (msg) {\n    error.message = msg;\n  }\n\n  throw error;\n};\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\nconst kebabCase = str => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n\nconst parseTimeout = value => {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\n/**\n * @typedef {Object} ClientOptions\n * @prop {string} [host]\n * @prop {number} [port]\n * @prop {string} [protocol]\n * @prop {Headers|Record<string, string>} [headers] - Request headers.\n * @prop {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\n * @prop {string} [apiPath] - Path to the API.\n * @prop {URL|string} [url] - Full API URL.\n */\n\n\nclass Client extends HTTP {\n  /**\n   *\n   * @param {ClientOptions|URL|Multiaddr|string} options\n   */\n  constructor(options = {}) {\n    /** @type {ClientOptions} */\n    const opts = normalizeInput(options);\n    super({\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\n      headers: opts.headers,\n      base: normalizeInput(opts.url).toString(),\n      handleError: errorHandler,\n      transformSearchParams: search => {\n        const out = new URLSearchParams(); // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n\n        for (const [key, value] of search) {\n          if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n            out.append(kebabCase(key), value);\n          } // server timeouts are strings\n\n\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value);\n          }\n        }\n\n        return out;\n      }\n    });\n    delete this.get;\n    delete this.put;\n    delete this.delete;\n    delete this.options;\n    const fetch = this.fetch;\n\n    this.fetch = (resource, options = {}) => {\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n  }\n\n}\n\nClient.errorHandler = errorHandler;\nmodule.exports = Client;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/DAPP-master-dup/DAPP-master/client/node_modules/ipfs-http-client/src/lib/core.js"],"names":["Multiaddr","require","toUri","isBrowser","isWebWorker","URL","parseDuration","log","HTTP","merge","isMultiaddr","input","e","normalizeInput","options","url","apiPath","pathname","undefined","protocol","location","hostname","host","port","errorHandler","response","msg","headers","get","startsWith","data","json","Message","message","text","err","error","HTTPError","includes","TimeoutError","KEBAB_REGEX","kebabCase","str","replace","match","toLowerCase","parseTimeout","value","Client","constructor","opts","timeout","base","toString","handleError","transformSearchParams","search","out","URLSearchParams","key","append","isNaN","put","delete","fetch","resource","call","method","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n/* eslint-env browser */\nconst Multiaddr = require('multiaddr')\nconst toUri = require('multiaddr-to-uri')\nconst { isBrowser, isWebWorker } = require('ipfs-utils/src/env')\nconst { URL } = require('iso-url')\nconst parseDuration = require('parse-duration')\nconst log = require('debug')('ipfs-http-client:lib:error-handler')\nconst HTTP = require('ipfs-utils/src/http')\nconst merge = require('merge-options')\n\nconst isMultiaddr = (input) => {\n  try {\n    Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nconst normalizeInput = (options = {}) => {\n  if (isMultiaddr(options)) {\n    options = { url: toUri(options) }\n  } else if (typeof options === 'string') {\n    options = { url: options }\n  }\n\n  const url = new URL(options.url)\n  if (options.apiPath) {\n    url.pathname = options.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n  if (!options.url) {\n    if (isBrowser || isWebWorker) {\n      url.protocol = options.protocol || location.protocol\n      url.hostname = options.host || location.hostname\n      url.port = options.port || location.port\n    } else {\n      url.hostname = options.host || 'localhost'\n      url.port = options.port || '5001'\n      url.protocol = options.protocol || 'http'\n    }\n  }\n  options.url = url\n\n  return options\n}\n\nconst errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  let error = new HTTP.HTTPError(response)\n\n  // This is what go-ipfs returns where there's a timeout\n  if (msg && msg.includes('context deadline exceeded')) {\n    error = new HTTP.TimeoutError(response)\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\n/**\n * @typedef {Object} ClientOptions\n * @prop {string} [host]\n * @prop {number} [port]\n * @prop {string} [protocol]\n * @prop {Headers|Record<string, string>} [headers] - Request headers.\n * @prop {number|string} [timeout] - Amount of time until request should timeout in ms or humand readable. https://www.npmjs.com/package/parse-duration for valid string values.\n * @prop {string} [apiPath] - Path to the API.\n * @prop {URL|string} [url] - Full API URL.\n */\n\nclass Client extends HTTP {\n  /**\n   *\n   * @param {ClientOptions|URL|Multiaddr|string} options\n   */\n  constructor (options = {}) {\n    /** @type {ClientOptions} */\n    const opts = normalizeInput(options)\n    super({\n      timeout: parseTimeout(opts.timeout) || 60000 * 20,\n      headers: opts.headers,\n      base: normalizeInput(opts.url).toString(),\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        // @ts-ignore https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      }\n    })\n\n    delete this.get\n    delete this.put\n    delete this.delete\n    delete this.options\n\n    const fetch = this.fetch\n\n    this.fetch = (resource, options = {}) => {\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nClient.errorHandler = errorHandler\n\nmodule.exports = Client\n"]},"metadata":{},"sourceType":"script"}